import RPi.GPIO as GPIO
import time
import Adafruit_DHT
# 핀 번호 설정 (라즈베리파이 4 GPIO 헤더에 맞게 수정)
LED_GREEN = 17 # 녹색 LED (GPIO 17, 물리적 11번 핀)
LED_YELLOW = 27 # 노란색 LED (GPIO 27, 물리적 13번 핀)
LED_RED = 22 # 빨간색 LED (GPIO 22, 물리적 15번 핀)
TOUCH_PIN = 23 # 터치 센서 (GPIO 23, 물리적 16번 핀)
TRIG_PIN = 24 # 초음파 센서 TRIG (GPIO 24, 물리적 18번 핀)
ECHO_PIN = 25 # 초음파 센서 ECHO (GPIO 25, 물리적 22번 핀)
DHT_PIN = 4 # DHT 온습도 센서 (GPIO 4, 물리적 7번 핀)
# GPIO 설정
GPIO.setmode(GPIO.BCM)
GPIO.setup([LED_GREEN, LED_YELLOW, LED_RED], GPIO.OUT) # LED 핀을 출력으
로 설정
GPIO.setup(TRIG_PIN, GPIO.OUT) # 초음파 송신(TRIG) 핀을 출력으로 설정
GPIO.setup(ECHO_PIN, GPIO.IN) # 초음파 수신(ECHO) 핀을 입력으로 설정
GPIO.setup(TOUCH_PIN, GPIO.IN) # 터치 센서를 입력으로 설정
# 온습도 센서 설정
SENSOR = Adafruit_DHT.DHT11 # DHT11 온습도 센서 사용
# 거리 측정 함수
def measure_distance():
 # 초음파 트리거 신호 발생 (10µs 동안 HIGH 신호)
 GPIO.output(TRIG_PIN, GPIO.HIGH)
 time.sleep(0.00001) # 10 마이크로초 동안 HIGH 신호 유지
 GPIO.output(TRIG_PIN, GPIO.LOW)
 # ECHO 핀에서 신호가 LOW에서 HIGH로 전환되는 시간 측정
 while GPIO.input(ECHO_PIN) == GPIO.LOW:
 start_time = time.time() # 신호가 LOW일 때 시간 기록
 
 while GPIO.input(ECHO_PIN) == GPIO.HIGH:
 end_time = time.time() # 신호가 HIGH일 때 시간 기록
 # 시간 간격을 계산하고 거리 계산 (cm)
 duration = end_time - start_time
 distance = duration * 17150 # 초음파 속도에 따른 거리 계산
 return distance
# 시스템 활성화 상태 변수
system_active = False
try:
 while True:
 # 터치 센서 입력을 확인하여 시스템 작동 상태 전환
 if GPIO.input(TOUCH_PIN) == GPIO.HIGH: # 터치 감지
 if not system_active: # 시스템 비활성화 상태에서 터치 시 활성화
 system_active = True
 print("시스템 작동 시작합니다.")
 else: # 활성화 상태에서 터치 시 비활성화
 system_active = False
 print("시스템 작동을 종료합니다.")
 GPIO.output([LED_GREEN, LED_YELLOW, LED_RED], GPIO.LOW) 
# 모든 LED 끄기
 continue
 if system_active: # 시스템이 활성화된 상태에서만 동작
 # 온도/습도 및 거리 측정
 humidity, temperature = Adafruit_DHT.read_retry(SENSOR, DHT_PIN)
 distance = measure_distance()
 # 측정된 결과 출력
 print(f"온도: {temperature:.1f}도, 습도: {humidity:.1f}%")
 print(f"거리: {distance:.1f} cm")
 # 거리 값에 따라 LED 상태 제어
 if distance > 20:
 GPIO.output(LED_GREEN, GPIO.HIGH) # 녹색 LED 켜기 (20cm 이
상)
 GPIO.output([LED_YELLOW, LED_RED], GPIO.LOW) # 다른 LED 끄
기
 elif 10 < distance <= 20:
 GPIO.output(LED_YELLOW, GPIO.HIGH) # 노란색 LED 켜기 (10cm 
< 거리 <= 20cm)
 GPIO.output([LED_GREEN, LED_RED], GPIO.LOW) # 다른 LED 끄기
 elif 0 < distance <= 10:
 GPIO.output(LED_RED, GPIO.HIGH) # 빨간색 LED 켜기 (0 < 거리 
<= 10cm)
 GPIO.output([LED_GREEN, LED_YELLOW], GPIO.LOW) # 다른 LED 
끄기
 time.sleep(1) # 1초 대기 (다음 측정 주기)
except KeyboardInterrupt:
 pass # 프로그램 중단 시 루프 빠져나감
finally:
 GPIO.cleanup() # 종료 시 GPIO 설정 초기
