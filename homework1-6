import RPi.GPIO as GPIO
import time
import Adafruit_DHT

# Pin number configuration (modified for Raspberry Pi 4 GPIO header)
LED_GREEN = 17  # Green LED (GPIO 17, physical pin 11)
LED_YELLOW = 27  # Yellow LED (GPIO 27, physical pin 13)
LED_RED = 22  # Red LED (GPIO 22, physical pin 15)
TOUCH_PIN = 23  # Touch sensor (GPIO 23, physical pin 16)
TRIG_PIN = 24  # Ultrasonic sensor TRIG (GPIO 24, physical pin 18)
ECHO_PIN = 25  # Ultrasonic sensor ECHO (GPIO 25, physical pin 22)
DHT_PIN = 4  # DHT temperature/humidity sensor (GPIO 4, physical pin 7)

# Disable GPIO warnings
GPIO.setwarnings(False)

# GPIO setup
GPIO.setmode(GPIO.BCM)
GPIO.setup([LED_GREEN, LED_YELLOW, LED_RED], GPIO.OUT)  # Set LED pins as output
GPIO.setup(TRIG_PIN, GPIO.OUT)  # Set ultrasonic transmitter (TRIG) pin as output
GPIO.setup(ECHO_PIN, GPIO.IN)  # Set ultrasonic receiver (ECHO) pin as input
GPIO.setup(TOUCH_PIN, GPIO.IN)  # Set touch sensor as input

# Temperature/humidity sensor setup
SENSOR = Adafruit_DHT.DHT11  # Using DHT11 temperature/humidity sensor

# Distance measurement function
def measure_distance():
    # Trigger ultrasonic signal (send HIGH signal for 10µs)
    GPIO.output(TRIG_PIN, GPIO.HIGH)
    time.sleep(0.00001)  # Maintain HIGH signal for 10 microseconds
    GPIO.output(TRIG_PIN, GPIO.LOW)
    
    # Measure the time when the signal changes from LOW to HIGH at the ECHO pin
    while GPIO.input(ECHO_PIN) == GPIO.LOW:
        start_time = time.time()  # Record the time when the signal is LOW
    
    while GPIO.input(ECHO_PIN) == GPIO.HIGH:
        end_time = time.time()  # Record the time when the signal is HIGH
    
    # Calculate time interval and compute the distance (in cm)
    duration = end_time - start_time
    distance = duration * 17150  # Calculate distance based on ultrasonic speed
    return distance

# System active state variable
system_active = False
last_touch_time = 0  # To store the last time the touch sensor was pressed

try:
    while True:
        current_time = time.time()

        # Check touch sensor input to toggle system activation state
        if GPIO.input(TOUCH_PIN) == GPIO.HIGH and current_time - last_touch_time > 1:  # Debounce for 1 second
            last_touch_time = current_time  # Update last touch time
            if not system_active:  # Activate system if it was inactive
                system_active = True
                print("System activated. Starting operation...")
            else:  # Deactivate system if it was active
                system_active = False
                print("System deactivated. Stopping operation...")
                GPIO.output([LED_GREEN, LED_YELLOW, LED_RED], GPIO.LOW)  # Turn off all LEDs
        
        if system_active:  # Only operate when the system is active
            # Measure temperature/humidity and distance
            humidity, temperature = Adafruit_DHT.read_retry(SENSOR, DHT_PIN)
            distance = measure_distance()
            
            # Check if data from sensor is valid
            if humidity is not None and temperature is not None:
                print(f"Temperature: {temperature:.1f}°C, Humidity: {humidity:.1f}%")
            else:
                print("Failed to retrieve data from temperature/humidity sensor.")
            
            print(f"Distance: {distance:.1f} cm")
            
            # Control LED state and output messages based on distance
            if distance > 20:
                GPIO.output(LED_GREEN, GPIO.HIGH)  # Turn on green LED (distance > 20 cm)
                GPIO.output([LED_YELLOW, LED_RED], GPIO.LOW)  # Turn off other LEDs
                print("Distance is more than 20 cm.")
            elif 10 < distance <= 20:
                GPIO.output(LED_YELLOW, GPIO.HIGH)  # Turn on yellow LED (10 cm < distance <= 20 cm)
                GPIO.output([LED_GREEN, LED_RED], GPIO.LOW)  # Turn off other LEDs
                print("Distance is between 10 and 20 cm.")
            elif 0 < distance <= 10:
                GPIO.output(LED_RED, GPIO.HIGH)  # Turn on red LED (distance <= 10 cm)
                GPIO.output([LED_GREEN, LED_YELLOW], GPIO.LOW)  # Turn off other LEDs
                print("Distance is less than 10 cm. Too close!")
            
            time.sleep(1)  # Wait 1 second before next measurement

except KeyboardInterrupt:
    pass  # Exit the loop when the program is interrupted

finally:
    print("Exiting the program. Cleaning up GPIO settings.")
    GPIO.cleanup()  # Reset GPIO settings on exit
